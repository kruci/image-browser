{"version":3,"sources":["components/UrlSelector.js","components/ImagesSinglePage.js","components/ImageList.js","components/Footer.js","extraction/extraction.js","App.js","serviceWorker.js","index.js"],"names":["UrlSelector","props","_useState","useState","_useState2","Object","slicedToArray","isExpanded","setIsExpanded","react_default","a","createElement","className","onMouseOver","onMouseOut","htmlFor","name","id","onChange","handleInputChange","autocomplete","onClick","search","ImagesSinglePage","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","state","images","then","setState","loaded","refresh","_this2","ImagesSinglePage_ErrorBoundary","map","image","key","src","url","React","Component","ErrorBoundary","_this3","hasError","error","info","console","log","children","ImageList","keys","obj","ImagesSinglePage_ImagesSinglePage","Footer","prop","proxyurl","getIamgesFromPage","tag","fetch","response","text","html","doc","DOMParser","parseFromString","Array","from","querySelectorAll","filter","img","window","location","hostname","substring","App","event","pagesWithImages","to","imageUrlContains","urlsToVisit","i","parseInt","thisUrl","replace","toString","rangeUrlImageExtractor","undefined","alert","target","value","defineProperty","Boolean","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d70ead93.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport default function UrlSelector(props) {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  return (\n    <div\n      className={\"UrlSelector\" + (isExpanded ? \" expanded\" : \"\")}\n      onMouseOver={() => setIsExpanded(true)}\n      onMouseOut={() => setIsExpanded(false)}\n    >\n      <p>Leave blank space in url, it will be replaced by number from range.</p>\n\n      <div className=\"pageUrl\">\n        <label htmlFor=\"pageUrl\">Page url</label>\n        <input\n          name=\"pageUrl\"\n          id=\"pageUrl\"\n          onChange={props.handleInputChange}\n          autocomplete=\"off\"\n        />\n      </div>\n\n      <div className=\"range\">\n        <label htmlFor=\"rangeFrom\">Range from</label>\n        <input\n          name=\"rangeFrom\"\n          id=\"rangeFrom\"\n          onChange={props.handleInputChange}\n          autocomplete=\"off\"\n        />\n        <label htmlFor=\"rangeTo\">to</label>\n        <input\n          name=\"rangeTo\"\n          id=\"rangeTo\"\n          onChange={props.handleInputChange}\n          autocomplete=\"off\"\n        />\n      </div>\n\n      <div className=\"imageUrlPattern\">\n        <label htmlFor=\"imageUrlPattern\">Only images with url containing</label>\n        <input\n          name=\"imageUrlPattern\"\n          id=\"imageUrlPattern\"\n          onChange={props.handleInputChange}\n          autocomplete=\"off\"\n        />\n      </div>\n\n      <div className=\"imageTag\">\n        <label htmlFor=\"imageTag\">Only images inside elements with tag </label>\n        <input\n          name=\"imageTag\"\n          id=\"imageTag\"\n          onChange={props.handleInputChange}\n          autocomplete=\"off\"\n        />\n      </div>\n\n      <button onClick={props.search}>Show</button>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default class ImagesSinglePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { images: this.props.images, loaded: false };\n  }\n\n  componentDidMount = () => {\n    this.state.images.then(images =>\n      this.setState({ images: images, loaded: true, refresh: this.props.refresh })\n    );\n  };\n\n\n  render() {\n    return (\n      <ErrorBoundary>\n        <div className={\"PageImages \" + this.state.refresh}>\n          {this.state.loaded &&\n            this.state.images.map(image => <img key={image+this.state.refresh}  src={image}/>)}\n          <p>{this.props.url}</p>\n        </div>\n      </ErrorBoundary>\n    );\n  }\n}\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    // You can also log the error to an error reporting service\n    console.log(error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n","import React from \"react\";\nimport ImagesSinglePage from \"./ImagesSinglePage\";\n\nexport default function ImageList(props) {\n  return (\n    <div className=\"ImageList\">\n      {Object.keys(props.images).map(obj => (\n        <ImagesSinglePage key={obj+props.refresh} url={obj} images={props.images[obj]} refresh={props.refresh} />\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Footer(prop) {\n  return null;\n}\n","const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n\nfunction getIamgesFromPage(url, tag) {\n  return fetch(proxyurl+url)\n    .then(function(response) {\n      // When the page is loaded convert it to text\n      return response.text();\n    })\n    .then(function(html) {\n      // Initialize the DOM parser\n      var parser = new DOMParser();\n\n      // Parse the text\n      var doc = parser.parseFromString(html, \"text/html\");\n\n      return Array.from(\n        doc.querySelectorAll((tag && tag !== \"\" ? tag + \" \" : \"\") + \"img\")\n      )\n        .filter(img => {\n          console.log(tag, window.location.hostname);\n          // removes git deploy urls (caused by proxiy)\n          if (img.src.substring(window.location.hostname) >= 0) {\n            return false;\n          }\n          return true;\n        })\n        .map(img => img.src);\n    });\n}\n\nexport default function rangeUrlImageExtractor(\n  url,\n  from,\n  to,\n  imageUrlContains,\n  tag\n) {\n  let urlsToVisit = [];\n  for (let i = parseInt(from); i <= parseInt(to); ++i) {\n    const thisUrl = url.replace(\" \", i.toString());\n\n    urlsToVisit[thisUrl] = getIamgesFromPage(thisUrl, tag);\n  }\n  return urlsToVisit;\n}\n","import React from \"react\";\nimport UrlSelector from \"./components/UrlSelector\";\nimport ImageList from \"./components/ImageList\";\nimport Footer from \"./components/Footer\";\nimport rangeUrlImageExtractor from \"./extraction/extraction.js\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {refresh: false};\n  }\n\n  search = event => {\n    if (this.state[\"pageUrl\"]) {\n      const pagesWithImages = rangeUrlImageExtractor(\n        this.state[\"pageUrl\"],\n        this.state[\"rangeFrom\"] || \"0\",\n        this.state[\"rangeTo\"] || \"0\",\n        this.state[\"imageUrlPattern\"] || undefined,\n        this.state[\"imageTag\"] || undefined\n      )\n\n      this.setState({ images: pagesWithImages, refresh:!this.state.refresh });\n    } else {\n      window.alert(\"Missing parameters\");\n    }\n  };\n\n  handleInputChange = event => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <UrlSelector\n          search={this.search}\n          handleInputChange={this.handleInputChange}\n        />\n        <ImageList\n          images={this.state.images !== undefined && this.state.images}\n          refresh={this.state.refresh}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}