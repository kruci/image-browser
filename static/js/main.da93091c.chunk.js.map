{"version":3,"sources":["components/UrlSelector.js","components/ImagesSinglePage.js","components/ImageList.js","components/Footer.js","extraction/extraction.js","App.js","serviceWorker.js","index.js"],"names":["UrlSelector","props","react_default","a","createElement","className","htmlFor","name","id","onChange","handleInputChange","onClick","search","ImagesSinglePage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","state","images","then","setState","loaded","ImagesSinglePage_ErrorBoundary","map","image","src","url","React","Component","ErrorBoundary","_this2","hasError","error","info","console","log","children","ImageList","keys","obj","ImagesSinglePage_ImagesSinglePage","key","Footer","prop","proxyurl","getIamgesFromPage","fetch","response","text","html","doc","DOMParser","parseFromString","Array","from","getElementsByTagName","img","App","event","pagesWithImages","to","urlsToVisit","i","thisUrl","replace","toString","rangeUrlImageExtractor","window","alert","target","value","defineProperty","undefined","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.da93091c.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function UrlSelector(props) {\n  return (\n    <div className=\"UrlSelector\">\n\n      <p>Leave blank space in url, it will be replaced by number from range.</p>\n\n      <div className=\"pageUrl\">\n      <label htmlFor=\"pageUrl\">Page url</label>\n      <input name=\"pageUrl\" id=\"pageUrl\" onChange={props.handleInputChange} />\n      </div>\n\n      <div className=\"range\">\n      <label htmlFor=\"rangeFrom\">Range from</label>\n      <input\n        name=\"rangeFrom\"\n        id=\"rangeFrom\"\n        onChange={props.handleInputChange}\n      />\n      <label htmlFor=\"rangeTo\">to</label>\n      <input name=\"rangeTo\" id=\"rangeTo\" onChange={props.handleInputChange} />\n      </div>\n\n      <div className=\"imagePattern\">\n      <label htmlFor=\"imagePattern\">Only images containing </label>\n      <input\n        name=\"imagePattern\"\n        id=\"imagePattern\"\n        onChange={props.handleInputChange}\n      />\n      </div>\n\n      <button onClick={props.search}>Show</button>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default class ImagesSinglePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { images: this.props.images, loaded: false };\n  }\n\n  componentDidMount = () => {\n    this.state.images.then(images =>\n      this.setState({ images: images, loaded: true })\n    );\n  };\n\n  render() {\n    return (\n      <ErrorBoundary>\n        <div className=\"PageImages\">\n          {this.state.loaded &&\n            this.state.images.map(image => <img src={image} />)}\n          <p>{this.props.url}</p>\n        </div>\n      </ErrorBoundary>\n    );\n  }\n}\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    // You can also log the error to an error reporting service\n    console.log(error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n","import React from \"react\";\nimport ImagesSinglePage from \"./ImagesSinglePage\";\n\nexport default function ImageList(props) {\n  return (\n    <div>\n      {Object.keys(props.images).map(obj => (\n        <ImagesSinglePage key={obj} url={obj} images={props.images[obj]} />\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Footer(prop) {\n  return null;\n}\n","const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n\nfunction getIamgesFromPage(url) {\n  return fetch(proxyurl + url)\n    .then(function(response) {\n      // When the page is loaded convert it to text\n      return response.text();\n    })\n    .then(function(html) {\n      // Initialize the DOM parser\n      var parser = new DOMParser();\n\n      // Parse the text\n      var doc = parser.parseFromString(html, \"text/html\");\n\n      // You can now even select part of that html as you would in the regular DOM\n      // Example:\n      // var docArticle = doc.querySelector('article').innerHTML;\n\n      //console.log(doc);\n      return Array.from(doc.getElementsByTagName(\"img\")).map(img => img.src);\n    });\n}\n\nexport default function rangeUrlImageExtractor(url, from, to) {\n  let urlsToVisit = [];\n  for (let i = from; i <= to; ++i) {\n    const thisUrl = url.replace(\" \", i.toString());\n\n    urlsToVisit[thisUrl] = getIamgesFromPage(thisUrl);\n  }\n  return urlsToVisit;\n}\n","import React from \"react\";\nimport UrlSelector from \"./components/UrlSelector\";\nimport ImageList from \"./components/ImageList\";\nimport Footer from \"./components/Footer\";\nimport ImagesSinglePage from \"./components/ImagesSinglePage\";\nimport rangeUrlImageExtractor from \"./extraction/extraction.js\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  search = event => {\n    if (\n      this.state[\"pageUrl\"] &&\n      this.state[\"rangeFrom\"] &&\n      this.state[\"rangeTo\"]\n    ) {\n      const pagesWithImages = rangeUrlImageExtractor(\n        this.state[\"pageUrl\"],\n        this.state[\"rangeFrom\"],\n        this.state[\"rangeTo\"]\n      );\n      this.setState({ images: pagesWithImages });\n    } else {\n      window.alert(\"Missing parameters\");\n    }\n  };\n\n  handleInputChange = event => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <UrlSelector\n          search={this.search}\n          handleInputChange={this.handleInputChange}\n        />\n        <ImageList images={this.state.images !== undefined && this.state.images} />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}